# vim: syntax=bash

function exists { which $1 &> /dev/null }

function html {
  cd "$HOME/data/html/$1"
}

function _html {
  _alternative 'dirs:list of projects:($(ls -l $HOME/data/html/ | grep "^d" | awk "{print \$9}"))'
}

compdef _html html

function js {
  cd "$HOME/data/javascript/$1"
}

function _js {
  _alternative 'dirs:list of projects:($(ls -l $HOME/data/javascript/ | grep "^d" | awk "{print \$9}"))'
}

compdef _js js

function ss {
  sudo service $1 start
}

function sst {
  sudo service $1 stop
}

function sr {
  sudo service $1 restart
}

function st {
  sudo service $1 status
}

function usephp {
    readonly version=${1:?"The version must be specified."}

    sudo update-alternatives --set php "/usr/bin/php$version"
    sudo update-alternatives --set phar "/usr/bin/phar$version"
    sudo update-alternatives --set phar.phar "/usr/bin/phar.phar$version"
}

function dcshell {
  dc exec $1 /bin/bash
}

function sapt {
  apt-cache search $1 | rg $1
}

function _fzf_dev {
  local dev_dirs_list=("${(@s/:/)DEV_DIRS}")
  local all_dev_dirs

  for d in $dev_dirs_list; do
    all_dev_dirs+="$(fd -d1 -td . $d)\n"
  done

  selected_dir=$(echo $all_dev_dirs | \
    fzf --preview 'tree {}' \
        --border=rounded \
        --margin=2,16 \
        --prompt="Projects > " \
        --pointer=▶ \
        -1 \
        --query "$LBUFFER")

  if [ -n "$selected_dir" ]; then
      BUFFER="vim $selected_dir"
      zle accept-line
  fi
}

zle -N _fzf_dev
bindkey '^F' _fzf_dev

function hist {
  selected_cmd=$(history -in -1 0 | \
    fzf --border=rounded \
        --margin=2,16 \
        --prompt="History » " \
        --pointer=▶ \
        -1 \
        --query "$1" | \
        awk -F'  ' '{print $2}')

  if [[ -n "$selected_cmd" ]]; then
    eval $selected_cmd
  fi
}

function fapt() {
  local pkg
  pkg=$(apt-cache search '.*' | fzf -m | awk '{print $1}')
  if [ "x$pkg" != "x" ]; then
    sudo apt install $(echo $pkg)
  fi
}


function fnpm() {
  local pkg
  pkg=$(all-the-package-names | fzf -m)
  if [ "x$pkg" != "x" ]; then
    npm i $(echo $packages)
  fi
}

function gitcheck() {
  for dir in $1/*/
  do
    \cd "$dir"
    if [[ `\git status --porcelain 2>/dev/null` ]]; then
      echo "$dir"
    fi
  done
}

